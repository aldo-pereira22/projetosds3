{"ast":null,"code":"var _jsxFileName = \"/home/byaldo/cursos/ws-devsuperior/projeto-spring-react-sds3/frontend/src/components/DonutChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DonutChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  usEffect(() => {\n    axios.get(`${BASE_URL}/sales/amount-by-seller`).then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n      console.log(chartData);\n    });\n  }, []); // const mockData = {\n  //     series: [477138, 499928, 444867, 220426, 473088],\n  //     labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n  // }\n\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels\n    },\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DonutChart, \"Y9qw60MIefyM7yXlnYU6Ju3Ituw=\");\n\n_c = DonutChart;\nexport default DonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"sources":["/home/byaldo/cursos/ws-devsuperior/projeto-spring-react-sds3/frontend/src/components/DonutChart/index.tsx"],"names":["axios","useState","Chart","BASE_URL","DonutChart","chartData","setChartData","labels","series","usEffect","get","then","response","data","myLabels","map","x","sellerName","mySeries","sum","console","log","options","legend","show"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAMA,MAAOC,UAAU,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAY;AAAEM,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAZ,CAA1C;AAEAC,EAAAA,QAAQ,CAAC,MAAK;AACVT,IAAAA,KAAK,CAACU,GAAN,CAAW,GAAEP,QAAS,yBAAtB,EACCQ,IADD,CACQC,QAAD,IAAY;AACf,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAb,MAAAA,YAAY,CAAC;AAACC,QAAAA,MAAM,EAAEO,QAAT;AAAmBN,QAAAA,MAAM,EAAEU;AAA3B,OAAD,CAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAZ;AACH,KARD;AAWH,GAZO,EAYL,EAZK,CAAR,CAJsB,CAoBtB;AACA;AACA;AACA;;AAEA,QAAMiB,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAE;AADF;AADI,GAAhB;AAOA,sBACI,QAAC,KAAD;AACI,IAAA,OAAO,EAAE,EAAE,GAAGF,OAAL;AAAcf,MAAAA,MAAM,EAACF,SAAS,CAACE;AAA/B,KADb;AAEI,IAAA,MAAM,EAAKF,SAAS,CAACG,MAFzB;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AASD,CAzCH;;GAAOJ,U;;KAAAA,U;AA2CL,eAAeA,UAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { SaleSum } from 'types/sale';\nimport { BASE_URL } from 'utils/requests';\n\ntype ChartData = {\n    labels: string[];\n    series: number[];\n}\nconst  DonutChart = () => {\n\n    const [chartData, setChartData] = useState<ChartData>({ labels: [], series: []});\n\n    usEffect(()=> {\n        axios.get(`${BASE_URL}/sales/amount-by-seller`)\n        .then( (response)=>{\n            const data = response.data as SaleSum[];\n            const myLabels = data.map(x => x.sellerName);\n            const mySeries = data.map(x => x.sum);\n\n            setChartData({labels: myLabels, series: mySeries})\n            console.log(chartData);\n        } )\n\n\n    }, [] )\n\n    \n\n    // const mockData = {\n    //     series: [477138, 499928, 444867, 220426, 473088],\n    //     labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    // }\n    \n    const options = {\n        legend: {\n            show: true\n        }\n    }\n       \n\n    return (\n        <Chart \n            options={{ ...options, labels:chartData.labels }}\n            series = { chartData.series}\n            type=\"donut\"\n            height=\"240\"\n        />\n\n    );\n  }\n  \n  export default DonutChart;\n  "]},"metadata":{},"sourceType":"module"}